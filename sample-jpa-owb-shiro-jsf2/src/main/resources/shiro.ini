# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here, 
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm


#datasource
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = jdbc/SECURITY
datasource.resourceRef = true
jdbcRealm.dataSource = $datasource

jdbcRealm.permissionsLookupEnabled=true
jdbcRealm.authenticationQuery=SELECT us.password FROM USER us WHERE us.email = ?
jdbcRealm.userRolesQuery=SELECT ro.role_name FROM ROLE ro INNER JOIN USER_ROLE usro ON usro.id_role = ro.id_role INNER JOIN USER us ON us.id_user = usro.id_user where us.email=?
jdbcRealm.permissionsQuery=SELECT ri.right_name FROM SECURITY.RIGHT ri INNER JOIN ROLE_RIGHT rori ON ri.id_right = rori.id_right INNER JOIN ROLE ro ON rori.id_role = ro.id_role WHERE ro.role_name= ?;
securityManager.realms=$jdbcRealm


#password hashing specification, put something big for hasIterations
#sha256Matcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
#sha256Matcher.hashAlgorithmName=SHA-256
#sha256Matcher.hashIterations=1
#jdbcRealm.credentialsMatcher=$sha256Matcher

shiro.loginUrl=/login.jsf
shiro.successUrl=/pages/main.jsf

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined 
# set of User accounts.

[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.
roles.unauthorizedUrl=/unauthorized.jsf

[urls]
# The 'urls' section is used for url-based security
# in web applications.  We'll discuss this section in the
# Web documentation

/javax.faces.resource/**=anon
/resources/=anon
/unauthorized.jsf=anon
/index.jsf=anon
/login.jsf=authc
/logout=logout
/pages/**=authc
/pages/admin/**=authc, roles[ROLE_ADMIN]
