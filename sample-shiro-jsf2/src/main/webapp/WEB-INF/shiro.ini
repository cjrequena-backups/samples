[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = jdbc/SECURITY
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT password FROM USER WHERE email = ?
jdbcRealm.userRolesQuery = SELECT role.role_name FROM ROLE role INNER JOIN USER_ROLE userrole ON userrole.id_role = role.id_role INNER JOIN USER user ON user.id_user = userrole.id_user where user.email=?
jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT right_name FROM ROLE_RIGHT WHERE role_name = ?
#jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource

securityManager.realms = $jdbcRealm

# Filter Setup
[urls]
/javax.faces.resource/** = anon
/unauthorized.xhtml = anon
/login.xhtml = authc
/logout = logout
/admin/** = authc, roles[ROLE_ADMIN]
/** = authc, roles[ROLE_USER,ROLE_ADMIN]