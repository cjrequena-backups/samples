
# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here, 
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# the realm should handle also authorization
jdbcRealm.permissionsLookupEnabled=false

# password hashing specification, put something big for hasIterations
#sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
#sha256Matcher.hashAlgorithmName=SHA-256
#sha256Matcher.hashIterations=1
#jdbcRealm.credentialsMatcher = $sha256Matcher

#datasource
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = jdbc/SECURITY
datasource.resourceRef = true
jdbcRealm.dataSource = $datasource

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT password FROM USER WHERE email = ?
jdbcRealm.userRolesQuery = SELECT role.role_name FROM ROLE role INNER JOIN USER_ROLE userrole ON userrole.id_role = role.id_role INNER JOIN USER user ON user.id_user = userrole.id_user where user.email=?
jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT right_name FROM ROLE_RIGHT WHERE role_name = ?
#jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource
securityManager.realms = $jdbcRealm

shiro.loginUrl = /login.xhtml
shiro.successUrl = /pages/main.xhtml

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined 
# set of User accounts.

[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.

roles.unauthorizedUrl = /unauthorized.jsf

[urls]
/javax.faces.resource/** = anon
/unauthorized.xhtml = anon
/login.xhtml = authc
/logout = logout
/admin/** = authc, roles[ROLE_ADMIN]
/** = authc, roles[ROLE_USER,ROLE_ADMIN]